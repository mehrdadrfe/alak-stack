alakGatekeeper:
  image: exdockerrepo/alak-stack-alak-gatekeeper:latest
  port: 8090
  env:
    REDIS_HOST: alak-redis-master:6379
    ALAK_GEO_URL: http://alak-geo:8081/lookup
    HA_PROXY_URL: https://ingress-nginx-controller.ingress-nginx
    SKIP_TLS_VERIFY: "true"
  serviceMonitor:
    enabled: true
    interval: 15s
    path: /metrics
    labels:
      release: prometheus

alakController:
  image: exdockerrepo/alak-stack-alak-controller:latest
  imagePullPolicy: IfNotPresent
  serviceType: ClusterIP
  servicePort: 8080
  replicas: 1
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi
  port: 8080
  extraEnv: []
  podAnnotations: {}
  env:
    REDIS_HOST: alak-redis-master:6379
    CORS_ORIGINS: https://alak-dashboard.example.com
  ingress:
    enabled: true
    host: alak-controller.example.com
    tlsSecret: example-tls-secret
    annotations:
      kubernetes.io/ingress.class: "nginx"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "60s"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "60s"

alakGeo:
  image: exdockerrepo/alak-stack-alak-geo:latest
  port: 8081
  env: {}
  storage:
    size: 1Gi
    accessModes: [ReadWriteOnce]
    storageClassName: ""
  ingress:
    enabled: true
    host: alak-geo.example.com
    tlsSecret: example-tls-secret

alakDashboard:
  image: exdockerrepo/alak-stack-alak-dashboard:1.1
  port: 3000
  replicas: 1
  env:
    CONTROLLER_ORIGIN: http://alak-controller:8080
    GEO_ORIGIN: http://alak-geo:8081
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
  ingress:
    enabled: true
    host: alak-dashboard.example.com
    tlsSecret: example-tls-secret